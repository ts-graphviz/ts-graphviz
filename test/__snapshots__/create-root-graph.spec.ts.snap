// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Root Graph Creation Functions > digraph() > builds graph using callback-style builder pattern 1`] = `
"digraph "G" {
  "aa";
  "bb";
  "cc";
  subgraph "A" {
    "Aaa" [
      color = "pink";
    ];
    "Abb" [
      color = "violet";
    ];
    "Acc";
    "Aaa":"a" -> "Abb" -> "Acc" -> "E" [
      color = "red";
    ];
  }
  "aa" -> "bb" -> "cc" [
    color = "red";
  ];
}"
`;

exports[`Root Graph Creation Functions > digraph() > builds graph with attributes object in callback-style builder 1`] = `
"digraph "G" {
  "aa";
  "bb";
  "cc";
  subgraph "A" {
    "Aaa" [
      color = "pink";
    ];
    "Abb" [
      color = "violet";
    ];
    "Acc";
    "Aaa":"a" -> "Abb" -> "Acc" -> "E" [
      color = "red";
    ];
  }
  "aa" -> "bb" -> "cc" [
    color = "red";
  ];
}"
`;

exports[`Root Graph Creation Functions > digraph() > includes comments on graph, nodes, edges, and subgraphs 1`] = `
"// This is directed graph.
digraph "G" {
  // This is node a.
  "aa";
  // This is node b.
  "bb";
  // This is node c.
  "cc";
  // It is subgraph A.
  // It is not cluster
  subgraph "A" {
    // This is node Aaa in subgraph A.
    "Aaa" [
      // It will be filled by pink.
      color = "pink";
    ];
  }
  // This is edge.
  // It connects a, b and c.
  "aa" -> "bb" -> "cc" [
    // Edge line will draw with red.
    color = "red";
  ];
}"
`;

exports[`Root Graph Creation Functions > digraph() > parameterized creation scenarios > id 1`] = `"digraph "id" {}"`;

exports[`Root Graph Creation Functions > digraph() > parameterized creation scenarios > id with attributes 1`] = `
"digraph "id" {
  label = "Label";
}"
`;

exports[`Root Graph Creation Functions > digraph() > parameterized creation scenarios > no id with attributes 1`] = `
"digraph {
  label = "Label";
}"
`;

exports[`Root Graph Creation Functions > digraph() > parameterized creation scenarios > no parameters 1`] = `"digraph {}"`;

exports[`Root Graph Creation Functions > digraph() > parameterized creation scenarios > strict id with attributes 1`] = `
"strict digraph "id" {
  label = "Label";
}"
`;

exports[`Root Graph Creation Functions > digraph() > parameterized creation scenarios > strict no id with attributes 1`] = `
"strict digraph {
  label = "Label";
}"
`;

exports[`Root Graph Creation Functions > digraph() > parameterized creation scenarios > strict no parameters 1`] = `"strict digraph {}"`;

exports[`Root Graph Creation Functions > digraph() > parameterized creation scenarios > strict with attributes 1`] = `
"strict digraph {
  label = "Label";
}"
`;

exports[`Root Graph Creation Functions > graph() > builds graph using callback-style builder pattern 1`] = `
"graph "G" {
  "aa";
  "bb";
  "cc";
  subgraph "A" {
    "Aaa" [
      color = "pink";
    ];
    "Abb" [
      color = "violet";
    ];
    "Acc";
    "hoge";
    "Aaa" -- "Abb" -- "Acc" -- "hoge":"fuga" [
      color = "red";
    ];
    "Aaa":"a":"w" -- "Abb":"w" -- "Aaa":"e" -- "Acc":"r":"e" [
      color = "red";
    ];
  }
  "aa" -- "bb" -- "cc" [
    color = "red";
  ];
}"
`;

exports[`Root Graph Creation Functions > graph() > builds graph with attributes object in callback-style builder 1`] = `
"graph "G" {
  "aa";
  "bb";
  "cc";
  subgraph "A" {
    "Aaa" [
      color = "pink";
    ];
    "Abb" [
      color = "violet";
    ];
    "Acc";
    "Aaa":"a" -- "Abb" -- "Acc" -- "E" [
      color = "red";
    ];
  }
  "aa" -- "bb" -- "cc" [
    color = "red";
  ];
}"
`;

exports[`Root Graph Creation Functions > graph() > escapes special characters in names and labels 1`] = `
"graph "G\\n\\"" {
  "a\\na" [
    label = "1\\n2\\n\\"\\n3";
  ];
  "b\\"b";
  "c\\nc\\"";
  subgraph "graph.name" {
    "node.name" [
      label = "node";
    ];
    "another.name" [
      label = "words with space and \\"quote\\"";
    ];
    "node.name" -- "another.name";
  }
  "a\\na" -- "b\\"b" -- "c\\nc\\"" [
    color = "red";
  ];
}"
`;

exports[`Root Graph Creation Functions > graph() > supports script-style subgraph and edge creation 1`] = `
"graph "G" {
  "node1";
  "node2";
  subgraph "A" {
    "A_node1";
    "A_node2";
    "A_node1" -- "A_node2";
    "B_node1" -- "B_node2";
  }
  subgraph "B" {
    "B_node1";
    "B_node2";
  }
  "node1" -- "node2";
}"
`;
