// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`toDot serialization for Digraph > Basic graph rendering > Comment support > includes multi-line graph comments in output 1`] = `
"// this is comment.
// second line.
digraph {}"
`;

exports[`toDot serialization for Digraph > Basic graph rendering > Comment support > includes single-line graph comments in output 1`] = `
"// this is comment.
digraph {}"
`;

exports[`toDot serialization for Digraph > Basic graph rendering > Label attribute quoting > preserves html-like label quotes without additional quoting 1`] = `
"digraph {
  graph [
    label = <<B>this is test for graph label</B>>;
  ];
  edge [
    label = <<U>this is test for edge label</U>>;
  ];
  node [
    label = <<I>this is test for node label</I>>;
  ];
}"
`;

exports[`toDot serialization for Digraph > Basic graph rendering > Label attribute quoting > quotes plain-text labels with double quotes 1`] = `
"digraph {
  graph [
    label = "this is test for graph label";
  ];
  edge [
    label = "this is test for edge label";
  ];
  node [
    label = "this is test for node label";
  ];
}"
`;

exports[`toDot serialization for Digraph > Basic graph rendering > renders a strict graph when strict=true 1`] = `"strict digraph {}"`;

exports[`toDot serialization for Digraph > Basic graph rendering > renders an empty graph with default settings 1`] = `"digraph {}"`;

exports[`toDot serialization for Digraph > Basic graph rendering > renders graph with attributes via apply() 1`] = `
"digraph {
  layout = "dot";
  dpi = 360;
}"
`;

exports[`toDot serialization for Digraph > Basic graph rendering > renders graph with custom attributes via set() 1`] = `
"digraph {
  dpi = 360;
}"
`;

exports[`toDot serialization for Digraph > Basic graph rendering > renders graph, edge, and node attributes grouped by category 1`] = `
"digraph {
  graph [
    color = "red";
  ];
  edge [
    label = "edge label";
  ];
  node [
    xlabel = "node xlabel";
  ];
}"
`;

exports[`toDot serialization for Digraph > Basic graph rendering > renders nested subgraphs to arbitrary depth 1`] = `
"digraph {
  "node1";
  "node2";
  subgraph "depth1" {
    "depth1_node1";
    "depth1_node2";
    subgraph "depth2" {
      "depth2_node1";
      "depth2_node2";
      "depth2_node1" -> "depth2_node2";
    }
    "depth1_node1" -> "depth1_node2";
  }
  "node1" -> "node2";
}"
`;

exports[`toDot serialization for Digraph > Basic graph rendering > renders simple nodes and an edge 1`] = `
"digraph {
  "node1";
  "node2";
  "node1" -> "node2";
}"
`;

exports[`toDot serialization for Digraph > Basic graph rendering > renders single-level subgraphs with nodes and edges 1`] = `
"digraph {
  "node1";
  "node2";
  subgraph "A" {
    "A_node1";
    "A_node2";
    "A_node1" -> "A_node2";
    "B_node1" -> "B_node2";
  }
  subgraph "B" {
    "B_node1";
    "B_node2";
  }
  "node1" -> "node2";
}"
`;

exports[`toDot serialization for Graph > Basic graph rendering > Comment support > includes multi-line graph comments in output 1`] = `
"// this is comment.
// second line.
graph {}"
`;

exports[`toDot serialization for Graph > Basic graph rendering > Comment support > includes single-line graph comments in output 1`] = `
"// this is comment.
graph {}"
`;

exports[`toDot serialization for Graph > Basic graph rendering > Label attribute quoting > preserves html-like label quotes without additional quoting 1`] = `
"graph {
  graph [
    label = <<B>this is test for graph label</B>>;
  ];
  edge [
    label = <<U>this is test for edge label</U>>;
  ];
  node [
    label = <<I>this is test for node label</I>>;
  ];
}"
`;

exports[`toDot serialization for Graph > Basic graph rendering > Label attribute quoting > quotes plain-text labels with double quotes 1`] = `
"graph {
  graph [
    label = "this is test for graph label";
  ];
  edge [
    label = "this is test for edge label";
  ];
  node [
    label = "this is test for node label";
  ];
}"
`;

exports[`toDot serialization for Graph > Basic graph rendering > renders a strict graph when strict=true 1`] = `"strict graph {}"`;

exports[`toDot serialization for Graph > Basic graph rendering > renders an empty graph with default settings 1`] = `"graph {}"`;

exports[`toDot serialization for Graph > Basic graph rendering > renders graph with attributes via apply() 1`] = `
"graph {
  layout = "dot";
  dpi = 360;
}"
`;

exports[`toDot serialization for Graph > Basic graph rendering > renders graph with custom attributes via set() 1`] = `
"graph {
  dpi = 360;
}"
`;

exports[`toDot serialization for Graph > Basic graph rendering > renders graph, edge, and node attributes grouped by category 1`] = `
"graph {
  graph [
    color = "red";
  ];
  edge [
    label = "edge label";
  ];
  node [
    xlabel = "node xlabel";
  ];
}"
`;

exports[`toDot serialization for Graph > Basic graph rendering > renders nested subgraphs to arbitrary depth 1`] = `
"graph {
  "node1";
  "node2";
  subgraph "depth1" {
    "depth1_node1";
    "depth1_node2";
    subgraph "depth2" {
      "depth2_node1";
      "depth2_node2";
      "depth2_node1" -- "depth2_node2";
    }
    "depth1_node1" -- "depth1_node2";
  }
  "node1" -- "node2";
}"
`;

exports[`toDot serialization for Graph > Basic graph rendering > renders simple nodes and an edge 1`] = `
"graph {
  "node1";
  "node2";
  "node1" -- "node2";
}"
`;

exports[`toDot serialization for Graph > Basic graph rendering > renders single-level subgraphs with nodes and edges 1`] = `
"graph {
  "node1";
  "node2";
  subgraph "A" {
    "A_node1";
    "A_node2";
    "A_node1" -- "A_node2";
    "B_node1" -- "B_node2";
  }
  subgraph "B" {
    "B_node1";
    "B_node2";
  }
  "node1" -- "node2";
}"
`;
